CREATE TABLE IF NOT EXISTS genre (
    genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS rating (
    rating_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS film (
    film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR NOT NULL,
    description VARCHAR(200),
    release_date DATE NOT NULL,
    duration INTEGER NOT NULL,
    rating_id INTEGER FOREIGN KEY (rating_id) REFERENCES rating,
    CONSTRAINT positive_duration CHECK (duration > 0),
    CONSTRAINT min_release_date CHECK (release_date >= '1985.12.28'::DATE)
);

CREATE TABLE IF NOT EXISTS film_genre (
    film_id INTEGER FOREIGN KEY (film_id) REFERENCES film,
    genre_id INTEGER FOREIGN KEY (genre_id) REFERENCES genre
);

CREATE TABLE IF NOT EXISTS friendship_status (
    friendship_status_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS user (
    user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR NOT NULL,
    login VARCHAR NOT NULL,
    name VARCHAR
    birthday DATE NOT NULL,
    CONSTRAINT email_contains_at_symbol CHECK (email like '%@%'),
    CONSTRAINT login_not_contains_spaces CHECK (login not like '% %'),
    CONSTRAINT birthday_in_past CHECK (birthday <= current_date())
);

CREATE TABLE IF NOT EXISTS user_friend (
    user_id INTEGER FOREIGN KEY (user_id) REFERENCES user,
    friend_id INTEGER FOREIGN KEY (user_id) REFERENCES user,
    friendship_status_id INTEGER FOREIGN KEY (friendship_status_id) REFERENCES friendship_status
);

CREATE TABLE IF NOT EXISTS film_like (
    film_id INTEGER FOREIGN KEY (film_id) REFERENCES film,
    user_id INTEGER FOREIGN KEY (user_id) REFERENCES user
);